{
  "author": {
    "name": "Ask Bjørn Hansen",
    "email": "ask@develooper.com",
    "url": "http://www.askask.com/"
  },
  "name": "stripe",
  "description": "Stripe API wrapper",
  "version": "1.3.0",
  "homepage": "https://github.com/abh/node-stripe",
  "repository": {
    "type": "git",
    "url": "git://github.com/abh/node-stripe.git"
  },
  "engines": {
    "node": ">= v0.4.0"
  },
  "main": "lib/main.js",
  "dependencies": {},
  "devDependencies": {},
  "readme": "# node-stripe\n\nAccess to the [Stripe](https://stripe.com/) [API](https://stripe.com/docs/api).\n\n\n## Installation\n\n`npm install stripe`\n\n## Usage overview\n\n\n    var api_key = 'abc';  // secret stripe API key\n    var stripe = require('stripe')(api_key);\n\n    stripe.customers.create(\n       { email: 'foobar@example.org' },\n       function(err, customer) {\n          if (err) {\n             console.log(err.message);\n             return;\n          }\n          console.log(\"customer id\", customer.id);\n       }\n     );\n\n\n## API\n\nAll methods takes a callback as their last parameter. The callback is\ncalled with a Javascript `Error` (if any) and then the response.\n\n* `stripe.charges` - create, retrieve, refund and list charges\n   * `.create(charge)` - [create a charge](https://stripe.com/docs/api#create_charge)\n   * `.retrieve(charge_id)` - [retrieve a charge](https://stripe.com/docs/api#retrieve_charge) by charge id\n   * `.refund(charge_id, amount)` - [refund a given charge](https://stripe.com/docs/api#refund_charge), amount in cents\n   * `.list(data)` - [list charges](https://stripe.com/docs/api#list_charges)\n* `stripe.customers` - create, retrieve, update, delete and list customers\n   * `.create(customer)` - [create a customer](https://stripe.com/docs/api#create_customer), takes the data as an object\n   * `.retrieve(customer_id)` - [retrieve a customer](https://stripe.com/docs/api#retrieve_customer) by customer id.\n   * `.update(customer_id, updates)` - [update a customer](https://stripe.com/docs/api#update_customer); `updates` is an object with new parameters\n   * `.del(customer_id)` - [delete a customer](https://stripe.com/docs/api#delete_customer)\n   * `.list(count, offset)` - [list customers](https://stripe.com/docs/api#list_customers)\n   * `.update_subscription(customer_id, data)` - [update subscription](https://stripe.com/docs/api#update_subscription)\n   * `.cancel_subscription(customer_id, at_period_end)` - [cancel subscription](https://stripe.com/docs/api#cancel_subscription)\n* `stripe.plans` - create, retrieve, delete and list subscription plans\n   * `.create(plan)` - [create a plan](https://stripe.com/docs/api#create_plan), takes the data as an object\n   * `.retrieve(plan_id)` - [retrieve a plan](https://stripe.com/docs/api#retrieve_plan) by plan id.\n   * `.update(plan_id, data)` - [update plan](https://stripe.com/docs/api#update_plan)\n   * `.del(plan_id)` - [delete a plan](https://stripe.com/docs/api#delete_plan)\n   * `.list(count, offset)` - [list plans](https://stripe.com/docs/api#list_plans)\n* `stripe.invoices` - [Invoices API](https://stripe.com/docs/api#invoices)\n   * `.retrieve(invoice_id)` - [retrieve an existing invoice](https://stripe.com/docs/api?lang=curl#retrieve_invoice)\n   * `.upcoming(customer_id)` - [retrieve the upcoming invoice for a customer](https://stripe.com/docs/api?lang=curl#retrieve_customer_invoice)\n   * `.list(parameters)` - [list invoices](https://stripe.com/docs/api#list_customer_invoices)\n* `stripe.invoice_items` - create, retrieve, update, delete and list invoice items\n   * `.create(invoice_item)` - [create a invoice item](https://stripe.com/docs/api#create_invoiceitem), takes the data as an object\n   * `.retrieve(invoice_item_id)` - [retrieve a invoice item](https://stripe.com/docs/api#retrieve_invoiceitem) by invoice item id.\n   * `.update(invoice_item_id, updates)` - [update a invoice item](https://stripe.com/docs/api#update_invoiceitem); `updates` is an object with new parameters\n   * `.del(invoice_item_id)` - [delete a invoice item](https://stripe.com/docs/api#delete_invoiceitem)\n   * `.list(customer_id, count, offset)` - [list invoice items](https://stripe.com/docs/api#list_invoiceitems); all parameters are optional\n* `stripe.coupons` - create, retrieve, delete and list coupons\n   * `.create(coupon)` - [create a coupon](https://stripe.com/docs/api#create_coupon), takes the data as an object\n   * `.retrieve(coupon_id)` - [retrieve a coupon](https://stripe.com/docs/api#retrieve_coupon) by coupon id.\n   * `.del(coupon_id)` - [delete a coupon](https://stripe.com/docs/api#delete_coupon)\n   * `.list(count, offset)` - [list coupons](https://stripe.com/docs/api#list_coupons)\n* `stripe.token` - [Tokens API](https://stripe.com/docs/api#tokens)\n   * `.create(card_data)` - [create a token](https://stripe.com/docs/api#create_token)\n   * `.retrieve(token_id)` - [retrieve a card token](https://stripe.com/docs/api#retrieve_token)\n* `stripe.events` - retrieve and list events\n   * `.retrieve(id)` - [retrieve an event](https://stripe.com/docs/api#retrieve_event)\n   * `.list()` - [list all events](https://stripe.com/docs/api#list_events)\n\n## TODO\n\nSee the [issue tracker](http://github.com/abh/node-stripe).\n\n## Tests\n\nTo run the tests, install vows with `npm install vows` and then run\n\n   STRIPE_API=your-test-api-key vows test/*\n\n## Author\n\nAsk Bjørn Hansen (ask@develooper.com). Development was sponsored by [YellowBot](http://www.yellowbot.com/).\n\n## License\n\nCopyright (C) 2011 Ask Bjørn Hansen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "stripe@1.3.0",
  "dist": {
    "shasum": "2d6575525cd0d5124865e25d7f82e55404eec23a"
  },
  "_from": "stripe@",
  "_resolved": "https://registry.npmjs.org/stripe/-/stripe-1.3.0.tgz"
}
